module.exports = {
  'array-bracket-newline': 'enforce linebreaks after opening and before closing array brackets',
  'array-bracket-spacing': 'enforce consistent spacing inside array brackets',
  'array-element-newline': 'enforce line breaks after each array element',
  'block-spacing': 'disallow or enforce spaces inside of blocks after opening block and before closing block',
  'brace-style': 'enforce consistent brace style for blocks',
  camelcase: 'enforce camelcase naming convention',
  'capitalized-comments': 'enforce or disallow capitalization of the first letter of a comment',
  'comma-dangle': 'require or disallow trailing commas',
  'comma-spacing': 'enforce consistent spacing before and after commas',
  'comma-style': 'enforce consistent comma style',
  'computed-property-spacing': 'enforce consistent spacing inside computed property brackets',
  'consistent-this': 'enforce consistent naming when capturing the current execution context',
  'eol-last': 'require or disallow newline at the end of files',
  'func-call-spacing': 'require or disallow spacing between function identifiers and their invocations',
  'func-name-matching': 'require function names to match the name of the variable or property to which they are assigned',
  'func-names': 'require or disallow named `function` expressions',
  'func-style': 'enforce the consistent use of either `function` declarations or expressions',
  'function-paren-newline': 'enforce consistent line breaks inside function parentheses',
  'id-blacklist': 'disallow specified identifiers',
  'id-length': 'enforce minimum and maximum identifier lengths',
  'id-match': 'require identifiers to match a specified regular expression',
  'implicit-arrow-linebreak': 'enforce the location of arrow function bodies',
  indent: 'enforce consistent indentation',
  'indent-legacy': 'enforce consistent indentation',
  'jsx-quotes': 'enforce the consistent use of either double or single quotes in JSX attributes',
  'key-spacing': 'enforce consistent spacing between keys and values in object literal properties',
  'keyword-spacing': 'enforce consistent spacing before and after keywords',
  'line-comment-position': 'enforce position of line comments',
  'linebreak-style': 'enforce consistent linebreak style',
  'lines-around-comment': 'require empty lines around comments',
  'lines-around-directive': 'require or disallow newlines around directives',
  'lines-between-class-members': 'require or disallow an empty line between class members',
  'max-depth': 'enforce a maximum depth that blocks can be nested',
  'max-len': 'enforce a maximum line length',
  'max-lines': 'enforce a maximum number of lines per file',
  'max-lines-per-function': 'enforce a maximum number of line of code in a function',
  'max-nested-callbacks': 'enforce a maximum depth that callbacks can be nested',
  'max-params': 'enforce a maximum number of parameters in function definitions',
  'max-statements': 'enforce a maximum number of statements allowed in function blocks',
  'max-statements-per-line': 'enforce a maximum number of statements allowed per line',
  'multiline-comment-style': 'enforce a particular style for multiline comments',
  'multiline-ternary': 'enforce newlines between operands of ternary expressions',
  'new-cap': 'require constructor names to begin with a capital letter',
  'new-parens': 'enforce or disallow parentheses when invoking a constructor with no arguments',
  'newline-after-var': 'require or disallow an empty line after variable declarations',
  'newline-before-return': 'require an empty line before `return` statements',
  'newline-per-chained-call': 'require a newline after each call in a method chain',
  'no-array-constructor': 'disallow `Array` constructors',
  'no-bitwise': 'disallow bitwise operators',
  'no-continue': 'disallow `continue` statements',
  'no-inline-comments': 'disallow inline comments after code',
  'no-lonely-if': 'disallow `if` statements as the only statement in `else` blocks',
  'no-mixed-operators': 'disallow mixed binary operators',
  'no-mixed-spaces-and-tabs': 'disallow mixed spaces and tabs for indentation',
  'no-multi-assign': 'disallow use of chained assignment expressions',
  'no-multiple-empty-lines': 'disallow multiple empty lines',
  'no-negated-condition': 'disallow negated conditions',
  'no-nested-ternary': 'disallow nested ternary expressions',
  'no-new-object': 'disallow `Object` constructors',
  'no-plusplus': 'disallow the unary operators `++` and `--`',
  'no-restricted-syntax': 'disallow specified syntax',
  'no-spaced-func': 'disallow spacing between function identifiers and their applications (deprecated)',
  'no-tabs': 'disallow all tabs',
  'no-ternary': 'disallow ternary operators',
  'no-trailing-spaces': 'disallow trailing whitespace at the end of lines',
  'no-underscore-dangle': 'disallow dangling underscores in identifiers',
  'no-unneeded-ternary': 'disallow ternary operators when simpler alternatives exist',
  'no-whitespace-before-property': 'disallow whitespace before properties',
  'nonblock-statement-body-position': 'enforce the location of single-line statements',
  'object-curly-newline': 'enforce consistent line breaks inside braces',
  'object-curly-spacing': 'enforce consistent spacing inside braces',
  'object-property-newline': 'enforce placing object properties on separate lines',
  'one-var': 'enforce variables to be declared either together or separately in functions',
  'one-var-declaration-per-line': 'require or disallow newlines around variable declarations',
  'operator-assignment': 'require or disallow assignment operator shorthand where possible',
  'operator-linebreak': 'enforce consistent linebreak style for operators',
  'padded-blocks': 'require or disallow padding within blocks',
  'padding-line-between-statements': 'require or disallow padding lines between statements',
  'prefer-object-spread': 'disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead.',
  'quote-props': 'require quotes around object literal property names',
  quotes: 'enforce the consistent use of either backticks, double, or single quotes',
  'require-jsdoc': 'require JSDoc comments',
  semi: 'require or disallow semicolons instead of ASI',
  'semi-spacing': 'enforce consistent spacing before and after semicolons',
  'semi-style': 'enforce location of semicolons',
  'sort-keys': 'require object keys to be sorted',
  'sort-vars': 'require variables within the same declaration block to be sorted',
  'space-before-blocks': 'enforce consistent spacing before blocks',
  'space-before-function-paren': 'enforce consistent spacing before `function` definition opening parenthesis',
  'space-in-parens': 'enforce consistent spacing inside parentheses',
  'space-infix-ops': 'require spacing around infix operators',
  'space-unary-ops': 'enforce consistent spacing before or after unary operators',
  'spaced-comment': 'enforce consistent spacing after the `//` or `/*` in a comment',
  'switch-colon-spacing': 'enforce spacing around colons of switch statements',
  'template-tag-spacing': 'require or disallow spacing between template tags and their literals',
  'unicode-bom': 'require or disallow Unicode byte order mark (BOM)',
  'wrap-regex': 'require parenthesis around regex literals'
};
